# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: TerraformInstaller@0
  displayName: TF_Install
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV3@3
  displayName: TF_Init
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'SPN-FortyTwo'
    backendAzureRmResourceGroupName: 'S2-RG-FortyTwo-CORE'
    backendAzureRmStorageAccountName: 'storagefortytwo801942'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'main.tfstate'

- task: TerraformTaskV3@3
  displayName: 'TF_Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-out main.tfplan'
    environmentServiceNameAzureRM: 'SPN-FortyTwo'

- task: TerraformTaskV3@3
  displayName: 'TF_Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: ' main.tfplan'
    environmentServiceNameAzureRM: 'SPN-FortyTwo'
- task: SqlAzureDacpacDeployment@1
  displayName: 'TF_SQL'
  inputs:
    azureSubscription: 'SPN-FortyTwo'
    AuthenticationType: 'server'
    ServerName: '$(SQLServer-InstanceName).database.windows.net'
    DatabaseName: '$(SQLServer-Database1Name)'
    SqlUsername: '$(SQLServer-InstanceAdminUserName)'
    SqlPassword: '$(SQLServer-InstanceAdminPassword)'
    deployType: 'SqlTask'
    SqlFile: 'dba01.sql'
    IpDetectionMethod: 'AutoDetect'